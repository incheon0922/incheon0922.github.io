<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>三维热力图</title>
    <url>/2023/10/06/cesium-san-wei-re-li-tu/</url>
    <content><![CDATA[<p>使用cesium编写三维热力图效果，并在此基础上整合了水效果代码，当作优化一下可视化效果了hh</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>大致思路就是通过<a href="https://www.patrick-wied.at/static/heatmapjs/">heatmap.js</a>生成热力图，根据数据范围进行格网划分，并构造顶点数据，高度可以根据顶点在canvas上面的坐标读到的数值以及后续的高度系数做设置，从而达到高度拉伸的效果，之后使用构造好的顶点数据以及热力图贴图生成primitive，这里整合了cesium自带的水效果代码</p>
<div style="position: relative; width: 100%; height: 0;padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=916885342&amp;bvid=BV1mu4y1x7FR&amp;cid=1292777550&amp;p=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/qq_34447899/article/details/131959111?spm=1001.2101.3001.6650.5&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-5-131959111-blog-127901231.235%5Ev38%5Epc_relevant_sort&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-5-131959111-blog-127901231.235%5Ev38%5Epc_relevant_sort&amp;utm_relevant_index=7">Cesium 使用自定义几何实现立体热力图</a></p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>热力图 三维</tag>
      </tags>
  </entry>
  <entry>
    <title>模型压平</title>
    <url>/2023/10/26/cesium-mo-xing-ya-ping/</url>
    <content><![CDATA[<p>模型压平用的是cesium的customShader来编写的，目前只是实现了规则矩形区域压平，以及后续的闪面优化，</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1、将矩形坐标范围通过customShader传入到着色器中<br>2、矩形坐标转为模型坐标，并将其与模型坐标比较，将范围内模型进行压平<br>压平后可能会出现闪面的情况，原因可能是深度导致的，我这里是选择差异化压平参数</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>压平效果如图所示：</p>
<p><img src="https://bu.dusays.com/2023/10/26/653a349fea9db.png"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/xtfge0915/article/details/130622016">Cesium从入门到放弃：模型压平</a></p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>3dtiles 规则区域 压平</tag>
      </tags>
  </entry>
  <entry>
    <title>后处理实现积雪效果</title>
    <url>/2024/02/01/hou-chu-li-shi-xian-ji-xue-xiao-guo/</url>
    <content><![CDATA[<p>cesium有两种思路实现积雪效果，一种渲染在模型等上面，另外一种则是通过后处理的方式。两种方式原理基本相同，但是效果范围以及修改方式有差别，各有取舍吧，本文采用的是后处理方式实现积雪效果</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1、根据纹理坐标还原世界坐标，将其单位化当作片元的上方向向量<br>2、计算每个像元在世界坐标下的法线<br>3、传入积雪影响因子，与得到的上方向向量和法线点乘值相乘来调节积雪程度</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://bu.dusays.com/2024/02/01/65bb9824c0370.png"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.liaomz.top/2022/09/16/cesium-zhong-shi-xian-xia-xue-fu-gai-xiao-guo/">Cesium中实现下雪覆盖效果</a><br><a href="https://www.guozk.top/posts/%E7%A7%AF%E9%9B%AA%E8%A6%86%E7%9B%96%E6%95%88%E6%9E%9C/">Cesium积雪效果</a></p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>后处理 积雪</tag>
      </tags>
  </entry>
  <entry>
    <title>点光源</title>
    <url>/2023/09/25/cesium-dian-guang-yuan/</url>
    <content><![CDATA[<p>在cesium中要复刻three里面的点光源效果，大概有两种思路<br>1、customShader编写光照计算<br>2、后处理通过深度获取法线、坐标等计算</p>
<p>这里采用的customShader的方法计算，且光照计算比较简单，只计算了漫反射模型的结果<br>后处理与之类似，但是计算步骤会多一点</p>
<h2 id="customShader方式"><a href="#customShader方式" class="headerlink" title="customShader方式"></a>customShader方式</h2><p>customShader的方式可以简化计算过程，可以直接使用已经计算好的顶点法线、视空间坐标以及材质等<br>不过有时候可能模型的法线结果不准确，需要自己计算，计算的方式也有两种。可以通过求偏导，或者cesium内置方法计算</p>
<div style="position: relative; width: 100%; height: 0;padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=448966395&amp;bvid=BV1Xj41187LK&amp;cid=1279143408&amp;p=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/rpgpp55/article/details/124073343?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2-124073343-blog-108745813.pc_relevant_multi_platform_featuressortv2dupreplace&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2-124073343-blog-108745813.pc_relevant_multi_platform_featuressortv2dupreplace&amp;utm_relevant_index=5">Cesium建筑自定义光源效果</a></p>
<p><a href="https://www.liaomz.top/2023/02/04/cesium-zhong-shi-xian-duo-guang-yuan/">Cesium中实现多光源</a></p>
<p><a href="https://blog.csdn.net/q1025387665a/article/details/126009223">customShader的解读</a></p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>点光源 webgl</tag>
      </tags>
  </entry>
  <entry>
    <title>离屏渲染</title>
    <url>/2023/09/26/cesium-chi-ping-xuan-ran/</url>
    <content><![CDATA[<p>离屏渲染可以实现类似于小地图、飞行浏览的效果，本文通过帧缓冲以及webgl绘制纹理的方式实现将相机某个视角所看到的场景绘制到另一个canvas上</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>两个不同上下文的canvas是不能共用一份纹理资源的，但是可以通过读取帧缓冲中的纹理值，根据纹理值生成一份新的纹理，最后绘制到另一个canvas上面即可实现离屏渲染。<br>在cesium渲染前，绑定创建好的帧缓冲，获取已经绘制好的一帧，之后根据上述方法将纹理结果输出到新创建的canvas上</p>
<p><img src="https://bu.dusays.com/2023/10/04/651cd7fa49931.png" alt="相机俯视视角绘制"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://juejin.cn/post/7166264791957897229">Cesium通过离屏渲染实现无人机侦察</a><br><a href="https://blog.csdn.net/weixin_43481439/article/details/125412372">Cesium中的离屏渲染</a></p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>帧缓冲 canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>复刻柏林噪声</title>
    <url>/2023/12/16/fu-ke-bo-lin-zao-sheng/</url>
    <content><![CDATA[<p>Three.js里面有很多关于体渲染的例子，柏林噪声就是其中比较好的一个。在cesium中复刻这个效果，采用的是直接构建三维纹理，对模型坐标进行采样渲染，大致思路如下</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1、修改cesium源码使其能够支持三维纹理，同时编写三维纹理类<br>2、创建自定义dc，并将所需的顶点数据、纹理以及模型矩阵传入<br>3、着色器这块基本可以参考<a href="https://threejs.org/examples/?q=perlin#webgl2_volume_perlin">Three.js</a>了</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://bu.dusays.com/2023/12/17/657e62fb7f46e.png"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/yue1241630499/article/details/123562142">Cesium Volumn 体渲染</a></p>
<p><a href="https://blog.csdn.net/yue1241630499/article/details/128508130?spm=1001.2014.3001.5502">Cesium中使用Sampler3D，3D纹理，实现体渲染</a></p>
]]></content>
      <categories>
        <category>cesium three</category>
      </categories>
      <tags>
        <tag>柏林噪声 体渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>模型不规则区域压平</title>
    <url>/2023/12/16/mo-xing-bu-gui-ze-qu-yu-ya-ping/</url>
    <content><![CDATA[<p>初版模型压平只实现了规则区域的压平效果，本文在此基础上优化，实现了不规则区域的压平，压平思路没有太大变化，主要是改进了范围判断的方法，使用射线法来判断模型坐标点是否在压平范围内，思路如下</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1、将多边形的点数据依次传入到customShader当中<br>2、编写射线法判断范围函数，在顶点着色器中将模型的坐标和范围坐标做判断<br>进而实现压平，射线法的具体实现可以看下方的参考链接</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>压平效果如图所示：</p>
<p><img src="https://bu.dusays.com/2023/12/16/657d9f9c2f24e.png"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/Form_/article/details/77841534">[射线法]判断一个点是否在多边形内部</a></p>
<p><a href="https://www.liaomz.top/2022/03/08/shader-zhong-yong-she-xian-fa-pan-duan-dian-zai-ping-mian-nei/">Shader中用射线法判断点在平面内</a></p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>3dtiles 不规则区域 压平</tag>
      </tags>
  </entry>
  <entry>
    <title>流体可视化</title>
    <url>/2024/09/12/liu-ti-ke-shi-hua/</url>
    <content><![CDATA[<p>基于cesium实现的流体渲染效果,shaderToy上面有很多关于流体渲染相关的例子，将这些效果移植到cesium上面可以在一定程度上增强水体淹没等三维可视化展示效果。本文结合网上各位大佬的例子，基于高度图采样实现流体渲染，大致思路如下</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1、采样生成所选区域的高度图，并将高度图传入到一张渲染高度的帧缓冲中<br>2、创建2张计算高度纹理缓冲区和2张计算水流量的缓冲区<br>3、选择其中一张高度纹理，采样地形高度和水位高度进行渲染</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><div style="position: relative; width: 100%; height: 0;padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?isOutside=true&amp;aid=113123667282867&amp;bvid=BV1yh4ne4EG9&amp;cid=25835733082&amp;p=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div>



<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.shadertoy.com/view/Xd3GWn">Cesium中实现流体模拟</a><br><a href="https://www.bilibili.com/video/BV1hevUeqEpN/?spm_id_from=333.999.0.0&amp;vd_source=48e433b69838c457028e08f37a108cba">CesiumJS 流体仿真 WebGL流体仿真 Fluid 水淹分析 山洪模拟</a><br><a href="https://www.bilibili.com/video/BV1o1421y7o6/?spm_id_from=333.337.search-card.all.click&amp;vd_source=48e433b69838c457028e08f37a108cba">Web3D | Cesium开源特效 | ShaderToy流体特效迁移代码</a></p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>体渲染 流体可视化 帧缓冲</tag>
      </tags>
  </entry>
  <entry>
    <title>气象数据体渲染</title>
    <url>/2023/12/17/qi-xiang-shu-ju-ti-xuan-ran/</url>
    <content><![CDATA[<p>气象数据的体渲染思路和上一篇<a href="https://tardius.life/2023/12/16/fu-ke-bo-lin-zao-sheng/">复刻柏林噪声</a>类似，都是采用三维纹理方式实现采样渲染的，但这里需要注意的是大范围的BoxGeometry在自定以的dc里面传入dimension，进行采样的时候会报错，可能是数据维度太大的问题，需要变换模型矩阵，编写自定义顶点数据或者使用BoxGeomtry构造顶点数据传入，着色器部份仍然可以参考<a href="https://threejs.org/examples/?q=perlin#webgl2_volume_perlin">Three.js</a>，数据来源于火星的<a href="http://mars3d.cn/editor-vue.html?id=graphic/custom/volumeCloud">气象云三维体</a>示例</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://bu.dusays.com/2023/12/17/657e8a2348d3a.png"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.liaomz.top/2022/10/26/cesium-zhong-dui-3d-shu-ju-ji-jin-xing-ti-xuan-ran-zhan-shi/">Cesium中对3D数据集进行体渲染展示</a></p>
<p><a href="http://mars3d.cn/editor-vue.html?id=graphic/custom/volumeCloud">气象云三维体</a></p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>气象数据 体渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>阴影率分析</title>
    <url>/2024/01/04/yin-ying-lu-fen-xi/</url>
    <content><![CDATA[<p>cesium阴影率分析的思路大概有两种，一是开启光照并生成格网点，时钟每tick一次记录太阳的位置，构造格网点到太阳位置的射线，通过射线求交的方法计算累计光照量，但这种方法比较耗时间且复杂，二是通过shadowMap来计算，本文采用的是第二种方式，这种方式可以极大的提升计算效率。大致思路如下</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>通过shadowMap带有的深度图，时钟每tick一次，计算格网点在太阳视角下的深度，同时采样深度图进行深度比较，判断格网点是否在阴影中，将判断结果输出成纹理，之后根据纹理统计格网点的全部光照量，最后进行分类着色展示</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><div style="position: relative; width: 100%; height: 0;padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=283358391&amp;bvid=BV1qc41187GG&amp;cid=1393714452&amp;p=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.liaomz.top/2023/04/18/cesium-zhong-shi-xian-yin-ying-lu-fen-xi/">Cesium中实现阴影率分析</a><br><a href="https://blog.csdn.net/yue1241630499/article/details/132199878?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-132199878-blog-130215072.235%5Ev40%5Epc_relevant_anti_t3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-132199878-blog-130215072.235%5Ev40%5Epc_relevant_anti_t3&amp;utm_relevant_index=3">Cesium中通过射线计算日照</a></p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>阴影 纹理 帧缓冲</tag>
      </tags>
  </entry>
  <entry>
    <title>爆炸效果实现</title>
    <url>/2024/05/30/bao-zha-xiao-guo-shi-xian/</url>
    <content><![CDATA[<p>基于cesium实现的体渲染爆炸效果</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>实现思路和之前的<a href="https://tardius.life/2023/12/16/fu-ke-bo-lin-zao-sheng/">复刻柏林噪声</a>类似都是体渲染，shader参考的是shaderToy上面的爆炸效果，可以查看下方参考链接</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><div style="position: relative; width: 100%; height: 0;padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=1855045783&amp;bvid=BV11s42137gF&amp;cid=1565250580&amp;p=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div>


<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.bilibili.com/video/BV1Ew41167xW/?share_source=copy_web&amp;vd_source=3bf67a436e0388ad32e47ece87d0be45">Cesium 体积爆炸效果 体积火 体积烟雾 爆炸特效 WebGL爆炸Shader</a><br><a href="https://www.shadertoy.com/view/Xd3GWn">Explosion effect</a></p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>体渲染 爆炸效果</tag>
      </tags>
  </entry>
  <entry>
    <title>高度雾及流动效果实现</title>
    <url>/2024/02/02/gao-du-wu-ji-liu-dong-xiao-guo-shi-xian/</url>
    <content><![CDATA[<p>基于高度实现的雾效果，可以在一定程度上优化场景展示，本文基于cesium实现了一版线性高度雾并在此基础上添加了流动效果，大致思路如下</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1、纹理坐标还原成世界坐标<br>2、计算世界坐标相对于地面的高程值，以及相机坐标与片元之间的距离，并根据高程值以及距离计算雾气浓度<br>3、根据雾气浓度混合场景及雾颜色<br>4、流动效果则是添加了一张雾的噪声图，纹理采样噪声值作为雾气浓度的扰动系数，从而实现流动</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><div style="position: relative; width: 100%; height: 0;padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=1850170815&amp;bvid=BV1Ap421f7rF&amp;cid=1427337377&amp;p=1&amp;autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"></iframe>
</div>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.liaomz.top/2023/10/20/cesium-zhong-shi-xian-gao-du-wu-xiao-guo/">Cesium中实现高度雾效果</a><br><a href="https://blog.csdn.net/linjf520/article/details/105558069">Unity Shader PostProcessing - 11 - Depth Fog/Height Fog - 雾效/深度雾效/高度雾/深度+高度雾</a></p>
]]></content>
      <categories>
        <category>cesium</category>
      </categories>
      <tags>
        <tag>后处理 高度雾</tag>
      </tags>
  </entry>
</search>
